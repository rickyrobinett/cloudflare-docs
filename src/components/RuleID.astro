---
import { z } from "astro:schema";

type Props = z.infer<typeof props>;

const props = z
	.object({
		id: z.string(),
	})
	.strict();

const { id } = props.parse(Astro.props);
---

<rule-id id={id}>
	<button title="Click to copy the full ID" class="px-0">
		<code class="flex">
			{`...${id.slice(-8)}`}
		</code>
	</button>
</rule-id>

<style>
	button {
		transition: opacity 100ms ease;

		opacity: 0.75;

		&:hover {
			cursor: copy;
			opacity: 1;
		}
	}
</style>

<script>
	import { addTooltip } from "~/util/tippy";

	class RuleID extends HTMLElement {
		handleCopy() {
			navigator.clipboard.writeText(this.id);
		}
		connectedCallback() {
			const button = this.querySelector<HTMLButtonElement>("button");

			addTooltip(this, "Copied", { trigger: "click", hideAfter: 1000 });

			button?.addEventListener("click", () => this.handleCopy());
		}
	}

	customElements.define("rule-id", RuleID);
</script>
