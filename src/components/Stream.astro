---
interface Props {
	videoId: string;
	videoTitle: string;
	thumbnailTimeOrURL: string;
	moreVideosLink: string;
}

const {
	videoId,
	videoTitle,
	thumbnailTimeOrURL,
	moreVideosLink = "true",
} = Astro.props;

const customerId = "1mwganm1ma0xgnmj";
const baseUrl = `https://customer-${customerId}.cloudflarestream.com/`;

const url = new URL(`${videoId}/iframe`, baseUrl);
url.searchParams.set("preload", "true");
url.searchParams.set("letterboxColor", "transparent");

// full url option
if (thumbnailTimeOrURL !== undefined) {
	if (!thumbnailTimeOrURL.startsWith("http")) {
		const thumbnailUrl = new URL(
			`${videoId}/thumbnails/thumbnail.jpg`,
			baseUrl,
		);
		thumbnailUrl.searchParams.set("fit", "crop");
		thumbnailUrl.searchParams.set("time", thumbnailTimeOrURL);

		url.searchParams.set("poster", encodeURI(thumbnailUrl.toString()));
	} else {
		url.searchParams.set("poster", thumbnailTimeOrURL);
	}
}
---

<stream-player data-id={videoId} data-title={videoTitle}>
	<div style="position: relative; padding-top: 56.25%">
		<iframe
			src={url.toString()}
			style="border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;"
			allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
			allowfullscreen="true"
			title={videoTitle}
			id={videoId}></iframe>
	</div>

	{
		moreVideosLink == "true" && (
			<a href="https://www.youtube.com/@CloudflareDevelopers" target="_blank">
				Watch more videos on our Developer Channel
			</a>
		)
	}
</stream-player>

<script is:inline src="https://embed.cloudflarestream.com/embed/sdk.latest.js"
></script>

<script>
	import { track } from "~/util/zaraz";

	declare function Stream(player: HTMLIFrameElement): HTMLVideoElement;

	class StreamPlayer extends HTMLElement {
		connectedCallback() {
			const id = CSS.escape(this.dataset.id as string);
			const title = this.dataset.title as string;

			const player = this.querySelector(`#${id}`) as HTMLIFrameElement;

			Stream(player).addEventListener("play", () => {
				track("play docs video", { title: title });
			});
		}
	}

	customElements.define("stream-player", StreamPlayer);
</script>
